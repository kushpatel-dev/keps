{% schema %}
  {
    "name": "Collection Grid",
    "settings": [
      {
        "type": "select",
        "id": "filter_type",
        "label": "Filter layout",
        "default": "vertical",
        "options": [
          {
            "value": "vertical",
            "label": "Vertical sidebar"
          }, {
            "value": "horizontal",
            "label": "Horizontal bar"
          }
        ]
      },
      {
        "type": "checkbox",
        "id": "enable_filtering",
        "default": true,
        "label": "Enable filtering"
      },
      {
        "type": "checkbox",
        "id": "enable_sorting",
        "default": true,
        "label": "Enable sorting"
      },
      {
        "type": "range",
        "id": "products_per_page",
        "min": 4,
        "max": 42,
        "step": 2,
        "default": 12,
        "label": "Products per page"
      }, {
        "type": "range",
        "id": "container_width",
        "min": 800,
        "max": 1600,
        "step": 50,
        "default": 1200,
        "label": "Container max width (px)"
      }, {
        "type": "range",
        "id": "columns_desktop",
        "min": 2,
        "max": 6,
        "step": 1,
        "default": 3,
        "label": "Columns on desktop"
      }, {
        "type": "range",
        "id": "columns_tablet",
        "min": 1,
        "max": 4,
        "step": 1,
        "default": 2,
        "label": "Columns on tablet"
      }, {
        "type": "select",
        "id": "grid_gap",
        "options": [
          {
            "value": "2",
            "label": "Small"
          }, {
            "value": "4",
            "label": "Medium"
          }, {
            "value": "6",
            "label": "Large"
          }, {
            "value": "8",
            "label": "Extra Large"
          }
        ],
        "default": "6",
        "label": "Grid gap"
      }
    ]
  }
{% endschema %}
<div class="collection-page bg-white py-8">
  <div class="flex flex-col md:flex-row gap-8 max-w-full mx-auto px-4">
    <!-- Filters -->
    <aside
      aria-labelledby="verticalTitle"
      class="
        facets-wrapper w-full md:w-1/4 bg-gray-50 p-4 rounded-2xl shadow-sm
        {% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}
        {% if section.settings.filter_type != 'vertical' %} page-width{% endif %}
      "
      id="main-collection-filters"
      data-id="{{ section.id }}">
      {% render 'facets'
        ,
 results: collection
        ,
 enable_filtering: section.settings.enable_filtering
        ,
 enable_sorting: section.settings.enable_sorting
        ,
 filter_type: section.settings.filter_type
        ,
 paginate: paginate
      %}
    </aside>

    <!-- Products -->
    <div class="collection-content flex-1">
      <div class="collection-products">
        {% paginate collection.products by section.settings.products_per_page %}
          <div class="products-grid" style="--grid-gap: {{ section.settings.grid_gap }}rem; max-width: {{ section.settings.container_width }}px;">
            {% for product in collection.products %}
              <div class="product-card">
                {% render 'card-product'
                  , card_product: product %}
              </div>
            {% endfor %}
          </div>

          {% if paginate.pages > 1 %}
            <div class="pagination mt-8 flex justify-center">
              {{ paginate | default_pagination }}
            </div>
          {% endif %}
        {% endpaginate %}
      </div>
    </div>
  </div>
</div>
<style>
  .products-grid {
    display: grid;
    gap: var(--grid-gap, 1.5rem);
    grid-template-columns: repeat(1, 1fr);
    /* default: mobile = 1 */
    transition: all 0.3s ease;
  }

  @media (min-width: 768px) {
    .products-grid {
      grid-template-columns: repeat(3, 1fr);
      /* tablet = 3 */
    }
  }

  @media (min-width: 1024px) {
    .products-grid {
      grid-template-columns: repeat(3, 1fr);
      /* desktop = 3 */
    }
  }

</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
  const filtersWrapper = document.querySelector('#main-collection-filters');
  if (!filtersWrapper) return;
  
  // Listen for filter form changes
  filtersWrapper.addEventListener('change', async () => {
    const form = filtersWrapper.querySelector('form');
    const formData = new FormData(form);
    const url = new URL(window.location.pathname, window.location.origin);
  
    for (const [key, value] of formData.entries()) {
      url.searchParams.append(key, value);
    }
    url.searchParams.set('section_id', '{{ section.id }}');
    await fetchAndRender(url.toString());
  });
  
  // Listen for pagination + remove all clicks
  document.addEventListener('click', async (e) => {
    // Pagination links
    if (e.target.closest('.pagination a')) {
      e.preventDefault();
      const url = new URL(e.target.closest('a').href);
      url.searchParams.set('section_id', '{{ section.id }}');
      await fetchAndRender(url.toString());
    }
  
    // Remove all filters
    if (e.target.closest('.facets__reset')) {
      e.preventDefault();
      const url = new URL(window.location.pathname, window.location.origin);
      url.searchParams.set('section_id', '{{ section.id }}');
      await fetchAndRender(url.toString());
    }
  });
  
  // Fetch + replace grid + filters
  async function fetchAndRender(url) {
    const response = await fetch(url);
    const html = await response.text();
    const parser = new DOMParser();
    const newDoc = parser.parseFromString(html, 'text/html');
  
    // Replace products grid
    const newGrid = newDoc.querySelector('.products-grid');
    document.querySelector('.products-grid').innerHTML = newGrid.innerHTML;
  
    // Replace filters (updates counts etc.)
    const newFilters = newDoc.querySelector('#main-collection-filters');
    document.querySelector('#main-collection-filters').innerHTML = newFilters.innerHTML;
  
    // Update URL so filters persist
    window.history.replaceState({}, '', url);
  }
  });
</script>